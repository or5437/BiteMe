package controllers;

import java.io.IOException;
import java.net.URL;
import java.time.LocalDate;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.ResourceBundle;

import com.itextpdf.text.DocumentException;

import client.ChatClient;
import client.ClientUI;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Node;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.ComboBox;
import javafx.scene.control.Label;
import javafx.scene.control.TextField;
import javafx.scene.layout.Pane;
import javafx.stage.Stage;
import logic.MsgToCEO;

/**
 * Description of GenerateQuarterlyReportController The class is designed to
 * generate the presentation of the quarterly reports for the CEO, by the bm
 * manager. the bm manager selects which branch to generete reports for, and
 * making it.
 * 
 * @author Michael Ravich
 * @version Version 1.0 Build 100 December 27, 2021
 */
public class GenerateQuarterlyReportController implements Initializable {
	/**
	 * Description of Quarter,Branch- used to save and send relevant quarter\branch
	 * for the server
	 */
	private static String Quarter, Branch;
	/**
	 * Description of mtc- used to send a message to the CEO that the report was
	 * generated by the bm manager
	 */
	public static MsgToCEO mtc = new MsgToCEO(0, 0, null, null, null, null, false);
	/** Description of list - used to set combo boxes properly */
	ObservableList<String> list;
	@FXML
	private Label lblGenerateQuarterlyReport;

	public static String getQuarter() {
		return Quarter;
	}

	public static String getBranch() {
		return Branch;
	}

	@FXML
	private Label lblBranch;

	@FXML
	private Label lblquarter;

	@FXML
	private Button btnGenerate;

	@FXML
	private TextField txtBranch;

	@FXML
	private ComboBox<String> cmbQuarter;

	@FXML
	private Button btnBack;

	@FXML
	private Button btnExit;

	@FXML
	private Label lblErrormsg;

	/**
	 * Description of Back(ActionEvent event) This method allows to the bm manager
	 * to go back to the bm manager central page
	 * 
	 * @param event
	 * @throws Exception - checked exception
	 */
	@FXML
	void Back(ActionEvent event) throws Exception {
		ClientUI.chat.accept("getNumberManagerMsgNotRead:" + "\t" + String.valueOf(ChatClient.u1.getIdNumber()));
		((Node) event.getSource()).getScene().getWindow().hide(); // hiding primary window
		FXMLLoader loader = new FXMLLoader();
		Stage primaryStage = new Stage();
		Pane root = loader.load(getClass().getResource("/controllers/BmManagerPage.fxml").openStream());
		BmManagerController bmManagerController = loader.getController();
		bmManagerController.loadData(String.valueOf(ChatClient.u1.getIdNumber()));
		Scene scene = new Scene(root);
		primaryStage.setResizable(false);
		primaryStage.setOnCloseRequest(event1 -> event1.consume());
		primaryStage.setTitle("Branch Manager");
		primaryStage.setScene(scene);
		primaryStage.show();
	}

	/**
	 * Description of returnBranchOfBM_Manager(String Role) This method responsible
	 * to extract the bm manager branch from his role field
	 * 
	 * @param Role - whole role includes the branch name
	 * @return String - only the branch name
	 */
	private String returnBranchOfBM_Manager(String Role) {
		if (Role.contains("North"))
			return "North";
		else if (Role.contains("Central"))
			return "Central";
		else if (Role.contains("South"))
			return "South";
		return null;
	}

	/**
	 * Description of setComboBoxes() This method responsible to set the branch
	 * combo box at the launching of this page
	 * 
	 * @throws IOException
	 */
	public void setComboBox() throws IOException {
		txtBranch.setText(returnBranchOfBM_Manager(ChatClient.u1.getRole()));
		ArrayList<String> cmb = new ArrayList<String>();
		cmb.add("First Quarter");
		cmb.add("Second Quarter");
		cmb.add("Third Quarter");
		cmb.add("Fourth Quarter");
		list = FXCollections.observableArrayList(cmb);
		cmbQuarter.setItems(list);
	}

	/**
	 * Description of Generate(ActionEvent event) This method responisble to
	 * generate quarterly report for the CEO. also shows the bm manager the report
	 * that sends (histogram presentation by GUI)
	 * 
	 * @param event
	 * @throws IOException
	 * @throws DocumentException
	 * @throws InterruptedException
	 */
	@FXML
	void Generate(ActionEvent event) throws IOException, DocumentException, InterruptedException {
		Quarter = cmbQuarter.getValue();
		Branch = txtBranch.getText();
		ClientUI.chat.accept("getDetailsForCEOreport:" + "\t" + Branch + "\t" + Quarter + "\t" + "Report1");
		if (ChatClient.detailsForCEOReportOrders.size() > 2) {
			((Node) event.getSource()).getScene().getWindow().hide(); // hiding primary window
			Stage primaryStage = new Stage();
			SendQuarterlyReportController sendQuarterlyReportController = new SendQuarterlyReportController();
			sendQuarterlyReportController.start(primaryStage);
		} else {
			lblErrormsg.setText("There is no orders for report!");
			return;
		}
		setApprovedMsgToCeoData();
		String msgToCeo = "msgToCeo:" + "\t" + String.valueOf(mtc.getFromManagerId()) + "\t"
				+ String.valueOf(mtc.getToUserId()) + "\t" + mtc.getDate() + "\t" + mtc.getHour() + "\t"
				+ mtc.getMessage() + "\t" + mtc.getStatus() + "\t" + String.valueOf(mtc.isRead());
		ClientUI.chat.accept(msgToCeo);

		((Node) event.getSource()).getScene().getWindow().hide(); // hide window
		FXMLLoader loader = new FXMLLoader();
		Stage primaryStage = new Stage();
		Pane root = loader.load(getClass().getResource("/controllers/MsgPage.fxml").openStream());
		MsgController msgController = loader.getController();
		msgController.loadData("Report sent to CEO!", 4);
		Scene scene = new Scene(root);
		primaryStage.setResizable(false);
		primaryStage.setOnCloseRequest(event1 -> event1.consume());
		primaryStage.setTitle("Message");
		primaryStage.setScene(scene);
		primaryStage.show();

	}

	/**
	 * Description of initialize(URL location, ResourceBundle resources) The method
	 * Responsible for initializing this page
	 */
	@Override
	public void initialize(URL location, ResourceBundle resources) {
		try {
			setComboBox();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		txtBranch.setEditable(false);
	}

	/**
	 * Description of setApprovedMsgToCeoData() The method responsible to send a
	 * message to the ceo, which describes that new quarterly report have been
	 * produced!
	 */
	public void setApprovedMsgToCeoData() {
		mtc.setFromManagerId(ChatClient.u1.getIdNumber());
		mtc.setToUserId(100);
		String changeFormatDate = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
		mtc.setDate(changeFormatDate.toString());
		mtc.setHour(LocalTime.now().getHour() + ":" + LocalTime.now().getMinute());
		mtc.setMessage(ChatClient.u1.getRole() + " produced a new quarterly report!");
		mtc.setStatus("-");
		mtc.setRead(false);
	}

	/**
	 * Description of start(Stage primaryStage) this method responsible to start the
	 * primary stage, and to launch the matching fxml file
	 * 
	 * @param primaryStage
	 * @throws Exception
	 */
	public void start(Stage primaryStage) throws Exception {
		Parent root = FXMLLoader.load(getClass().getResource("/controllers/GenerateQuarterlyReportPage.fxml"));
		Scene scene = new Scene(root);
		primaryStage.setScene(scene);
		primaryStage.setResizable(false);
		primaryStage.setOnCloseRequest(event1 -> event1.consume());
		primaryStage.setTitle("Generate Quarterly Reports");
		primaryStage.show();
	}

}
